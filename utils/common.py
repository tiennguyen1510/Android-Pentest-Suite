import subprocess
import os
from report.models import *
import utils.report_handle as report_handle
import utils.cmd as cmd

"""
Lay danh sach cac tool
"""
def get_tool_list():
    return ['Qark', 'Dependency Check', 'Sniffgit', 'AndroBugs', 'DB Parser']


"""
Lay danh sach cac app trong dien thoai
"""
def get_app_list():
    apps = open("outdir/app_list.txt", "r")
    appList = []
    for app in apps:
        appList.append(app.rstrip())
    return appList

"""
Pull apk tu dien thoai
"""
def pull_apk(app_name):
    # kiem tra file ton tai
    if not os.path.isfile('outdir/file/' + app_name):
        cmd.do_cmd(["sh", "scripts/pull_file.sh", app_name])


"""
xoa resource cu
"""
def delete_old_resource():
    # delete files
    cmd.do_cmd(["sh", "scripts/remove.sh"])
    # delete db
    ReportQark.objects.all().delete()
    ReportDc.objects.all().delete()
    ReportSniffgit.objects.all().delete()
    ReportAndro.objects.all().delete()
    ReportDbParser.objects.all().delete()
    ReportHistory.objects.all().delete()

"""
dua vao tool_index, chay tool duoc yeu cau
"""
def use_tool(app_name, tool_index):
    # cac tool ko can decompile
    if "3" == tool_index:
        report_andro(app_name)
        return
    if "4" == tool_index:
        report_dbparser(app_name)
        return

    # qark se decomplie, cac tool ben duoi can decompile truoc
    report_qark(app_name)

    # kiem tra db xem da su dung tool_index chua
    if "1" == tool_index:
        report_dc(app_name)
    if "2" == tool_index:
        report_sniffgit(app_name)
    # neu chua thi --> switch case
    return


"""
su dung tool qark
"""
def report_qark(app):
    # kiem tra db xem da su dung tool nay cho app can scan chua
    if 0 == ReportHistory.objects.filter(app_name=app).filter(tool_index='0').count():
        # chay qark
        cmd.do_cmd(["sh", "scripts/report_qark.sh", app])
        ReportHistory(app_name=app, tool_index='0').save()
        # xu ly ket qua report
        report_handle.handle_qark_report(app)


"""
su dung tool dependency check
"""
def report_dc(app):
    if 0 == ReportHistory.objects.filter(app_name=app).filter(tool_index='1').count():
        # chay dependency check
        cmd.do_cmd(["sh", "scripts/report_dc.sh", app.replace('.apk', '')])
        ReportHistory(app_name=app, tool_index='1').save()
        # xu ly ket qua report
        report_handle.handle_dc_report(app)

"""
su dung tool sniffgit
"""
def report_sniffgit(app):
    if 0 == ReportHistory.objects.filter(app_name=app).filter(tool_index='2').count():
        try:
            cmd.do_cmd(["sh", "scripts/report_sniffgit.sh", app])
            ReportHistory(app_name=app, tool_index='2').save()
        except:
            pass
        report_handle.handle_sniffgit_report(app)
    
    # kiem tra co ket noi khong
    if 0 == ReportHistory.objects.filter(app_name=app).filter(tool_index='2').count():
        connectResult = cmd.do_cmd(["adb", "get-state"])
        if connectResult.strip() == "device":
            try:
                data_location = app.strip()[ : app.find('-')]
                cmd.do_cmd(["sh", "scripts/pull_data.sh", data_location, app.strip()])
                cmd.do_cmd(["sh", "scripts/report_sniffgit_data.sh", app.strip()])
            except:
                pass
            report_handle.handle_sniffgit_report_data(app)

"""
su dung tool AndrogBugs
"""
def report_andro(app):
    if 0 == ReportHistory.objects.filter(app_name=app).filter(tool_index='3').count():
        cmd.do_cmd(["sh", "scripts/report_andro.sh", app])
        ReportHistory(app_name=app, tool_index='3').save()
        report_handle.handle_andro_report(app)


"""
su dung tool DB Parser
"""
def report_dbparser(app):
    if 0 == ReportHistory.objects.filter(app_name=app).filter(tool_index='4').count():
        # kiem tra co pull ve chua
        if not os.path.isdir("outdir/source/" + app  + "/app_data"):
            data_location = app.strip()[ : app.find('-')]
            cmd.do_cmd(["sh", "scripts/pull_data.sh", data_location, app.strip()])
        
        ReportHistory(app_name=app, tool_index='4').save()
        # tim tat ca cac file db
        report_handle.handle_dbparser_report(app)


def run_all_tool(app):
    try:
        report_qark(app)
    except:
        pass

    try:
        report_dc(app)
    except:
        pass

    try:
        report_sniffgit(app)
    except:
        pass

    try:
        report_andro(app)
    except:
        pass

    try:
        report_dbparser(app)
    except:
        pass


